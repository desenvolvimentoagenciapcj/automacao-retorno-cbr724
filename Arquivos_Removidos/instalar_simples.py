#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Instala√ß√£o Simplificado
Prepara o ambiente para execu√ß√£o do sistema MVP
"""

import os
import sys
import subprocess
from pathlib import Path

def verificar_python():
    """Verifica vers√£o do Python"""
    version = sys.version_info
    print(f"üêç Python {version.major}.{version.minor}.{version.micro} detectado")
    
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python 3.8 ou superior √© necess√°rio!")
        return False
    
    print("‚úÖ Vers√£o do Python OK")
    return True

def instalar_dependencias():
    """Instala depend√™ncias b√°sicas"""
    print("\nüì¶ Instalando depend√™ncias...")
    
    try:
        subprocess.run(
            [sys.executable, "-m", "pip", "install", "-r", "requirements.txt"],
            check=True,
            capture_output=True,
            text=True
        )
        print("‚úÖ Depend√™ncias instaladas com sucesso!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao instalar depend√™ncias:")
        print(e.stderr)
        return False

def criar_diretorios():
    """Cria estrutura de diret√≥rios"""
    print("\nüìÅ Criando diret√≥rios...")
    
    diretorios = [
        "D:\\Retornos\\Entrada",
        "D:\\Retornos\\Processados",
        "D:\\Retornos\\Erro",
        "D:\\Retornos\\Backup",
        "logs"
    ]
    
    for diretorio in diretorios:
        Path(diretorio).mkdir(parents=True, exist_ok=True)
        print(f"   ‚úÖ {diretorio}")
    
    print("‚úÖ Diret√≥rios criados!")

def verificar_access_driver():
    """Verifica driver do Access"""
    print("\nüîç Verificando driver Access...")
    
    try:
        import pyodbc
        drivers = [x for x in pyodbc.drivers() if 'Access' in x]
        
        if drivers:
            print(f"‚úÖ Driver encontrado: {drivers[0]}")
            return True
        else:
            print("‚ö†Ô∏è  Driver Access n√£o encontrado!")
            print("üì• Baixe em: https://www.microsoft.com/download/details.aspx?id=54920")
            return False
    except ImportError:
        print("‚ö†Ô∏è  pyodbc n√£o instalado ainda")
        return False

def criar_script_bat():
    """Cria script .bat para execu√ß√£o"""
    print("\nüìù Criando script de inicializa√ß√£o...")
    
    script = """@echo off
title Monitor de Retorno Bancario
echo.
echo ========================================
echo    MONITOR DE RETORNO BANCARIO
echo ========================================
echo.
cd /d "%~dp0"
python monitor_arquivos_simples.py
pause
"""
    
    with open("iniciar.bat", "w", encoding="utf-8") as f:
        f.write(script)
    
    print("‚úÖ Script 'iniciar.bat' criado!")

def main():
    """Instala√ß√£o principal"""
    print("=" * 60)
    print("üîß INSTALA√á√ÉO SIMPLIFICADA - RETORNO BANC√ÅRIO MVP")
    print("=" * 60 + "\n")
    
    if not verificar_python():
        return
    
    instalar_dependencias()
    criar_diretorios()
    verificar_access_driver()
    criar_script_bat()
    
    print("\n" + "=" * 60)
    print("‚úÖ INSTALA√á√ÉO CONCLU√çDA!")
    print("=" * 60)
    print("\nüìã PR√ìXIMOS PASSOS:")
    print("1. ‚úèÔ∏è  Edite 'config.yaml' e configure o caminho do banco Access")
    print("2. üß™ Execute 'python testar_simples.py' para validar")
    print("3. üöÄ Execute 'iniciar.bat' para iniciar o monitor")
    print("\n" + "=" * 60 + "\n")

if __name__ == "__main__":
    main()