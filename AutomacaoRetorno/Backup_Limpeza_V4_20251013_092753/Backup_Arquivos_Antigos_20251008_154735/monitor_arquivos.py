#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Monitor de Arquivos de Retorno Banc√°rio
Sistema de automa√ß√£o para processamento de arquivos CNAB
"""

import os
import time
import yaml
import logging
from datetime import datetime
from pathlib import Path
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from processador_cnab import ProcessadorCNAB
from integrador_access import IntegradorAccess
from notificador import Notificador

class MonitorArquivos(FileSystemEventHandler):
    """Classe respons√°vel por monitorar a pasta de entrada de arquivos"""
    
    def __init__(self, config):
        self.config = config
        self.processador = ProcessadorCNAB(config)
        self.integrador = IntegradorAccess(config)
        self.notificador = Notificador(config)
        
        # Configurar logging
        self.setup_logging()
        
        # Criar diret√≥rios necess√°rios
        self.criar_diretorios()
        
        self.logger.info("Monitor de arquivos iniciado")
    
    def setup_logging(self):
        """Configura o sistema de logs"""
        log_dir = Path(self.config['diretorios']['logs'])
        log_dir.mkdir(parents=True, exist_ok=True)
        
        log_file = log_dir / f"monitor_{datetime.now().strftime('%Y%m%d')}.log"
        
        logging.basicConfig(
            level=getattr(logging, self.config['log']['nivel']),
            format=self.config['log']['formato'],
            handlers=[
                logging.FileHandler(log_file, encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
    
    def criar_diretorios(self):
        """Cria os diret√≥rios necess√°rios se n√£o existirem"""
        diretorios = [
            self.config['diretorios']['entrada'],
            self.config['diretorios']['processados'],
            self.config['diretorios']['erro'],
            self.config['diretorios']['backup'],
            self.config['diretorios']['logs']
        ]
        
        for diretorio in diretorios:
            Path(diretorio).mkdir(parents=True, exist_ok=True)
            self.logger.debug(f"Diret√≥rio verificado/criado: {diretorio}")
    
    def on_created(self, event):
        """Evento disparado quando um novo arquivo √© criado na pasta monitorada"""
        if event.is_directory:
            return
        
        arquivo = event.src_path
        nome_arquivo = os.path.basename(arquivo)
        
        self.logger.info(f"Novo arquivo detectado: {nome_arquivo}")
        
        # Aguardar um pouco para garantir que o arquivo foi completamente copiado
        time.sleep(2)
        
        # Verificar se √© um arquivo de retorno v√°lido
        if self.is_arquivo_retorno(arquivo):
            self.processar_arquivo(arquivo)
        else:
            self.logger.warning(f"Arquivo ignorado (n√£o √© retorno banc√°rio): {nome_arquivo}")
    
    def is_arquivo_retorno(self, arquivo):
        """Verifica se o arquivo √© um retorno banc√°rio v√°lido"""
        nome = os.path.basename(arquivo).upper()
        extensoes_validas = ['.RET', '.TXT', '.REM', '.CRT']
        
        # Verificar extens√£o
        if not any(nome.endswith(ext) for ext in extensoes_validas):
            return False
        
        # Verificar tamanho m√≠nimo
        try:
            if os.path.getsize(arquivo) < 100:  # Arquivo muito pequeno
                return False
        except OSError:
            return False
        
        # Verificar se cont√©m indicadores de CNAB
        try:
            with open(arquivo, 'r', encoding='latin1') as f:
                primeira_linha = f.readline()
                # Header CNAB240 come√ßa com '01' ou CNAB400 com '0'
                if primeira_linha.startswith(('01', '0')):
                    return True
        except Exception as e:
            self.logger.error(f"Erro ao verificar arquivo {arquivo}: {e}")
            return False
        
        return False
    
    def processar_arquivo(self, arquivo):
        """Processa um arquivo de retorno"""
        nome_arquivo = os.path.basename(arquivo)
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        try:
            self.logger.info(f"Iniciando processamento: {nome_arquivo}")
            
            # Fazer backup do banco antes do processamento
            if self.config['banco']['backup_antes_processo']:
                self.integrador.fazer_backup()
            
            # Processar arquivo CNAB
            registros = self.processador.processar_arquivo(arquivo)
            
            if not registros:
                raise Exception("Nenhum registro v√°lido encontrado no arquivo")
            
            # Integrar com o banco Access
            resultado = self.integrador.processar_registros(registros)
            
            # Mover arquivo para pasta de processados
            arquivo_processado = os.path.join(
                self.config['diretorios']['processados'],
                f"{timestamp}_{nome_arquivo}"
            )
            os.rename(arquivo, arquivo_processado)
            
            # Enviar notifica√ß√£o de sucesso
            self.notificador.enviar_sucesso(nome_arquivo, resultado)
            
            self.logger.info(f"Arquivo processado com sucesso: {nome_arquivo}")
            self.logger.info(f"Registros processados: {len(registros)}")
            self.logger.info(f"Baixas realizadas: {resultado.get('baixas', 0)}")
            
        except Exception as e:
            self.logger.error(f"Erro ao processar {nome_arquivo}: {str(e)}")
            
            # Mover arquivo para pasta de erro
            arquivo_erro = os.path.join(
                self.config['diretorios']['erro'],
                f"{timestamp}_ERRO_{nome_arquivo}"
            )
            try:
                os.rename(arquivo, arquivo_erro)
            except OSError:
                pass
            
            # Enviar notifica√ß√£o de erro
            self.notificador.enviar_erro(nome_arquivo, str(e))
    
    def processar_arquivos_pendentes(self):
        """Processa arquivos que j√° est√£o na pasta de entrada"""
        pasta_entrada = self.config['diretorios']['entrada']
        
        try:
            arquivos = [f for f in os.listdir(pasta_entrada) 
                       if os.path.isfile(os.path.join(pasta_entrada, f))]
            
            if arquivos:
                self.logger.info(f"Encontrados {len(arquivos)} arquivos pendentes")
                
                for arquivo in arquivos:
                    caminho_completo = os.path.join(pasta_entrada, arquivo)
                    if self.is_arquivo_retorno(caminho_completo):
                        self.processar_arquivo(caminho_completo)
                        time.sleep(1)  # Pequena pausa entre processamentos
        except Exception as e:
            self.logger.error(f"Erro ao processar arquivos pendentes: {e}")

def main():
    """Fun√ß√£o principal"""
    try:
        # Carregar configura√ß√µes
        with open('config.yaml', 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        print("=" * 60)
        print("üè¶ SISTEMA DE AUTOMA√á√ÉO - RETORNO BANC√ÅRIO")
        print("=" * 60)
        print(f"üìÅ Monitorando: {config['diretorios']['entrada']}")
        print(f"üíæ Banco Access: {config['banco']['caminho']}")
        print(f"üìß Notifica√ß√µes: {'Ativadas' if config['email']['enviar_sucesso'] else 'Desativadas'}")
        print("=" * 60)
        
        # Criar monitor
        monitor = MonitorArquivos(config)
        
        # Processar arquivos j√° existentes
        monitor.processar_arquivos_pendentes()
        
        # Configurar observer
        observer = Observer()
        observer.schedule(
            monitor, 
            config['diretorios']['entrada'], 
            recursive=False
        )
        
        # Iniciar monitoramento
        observer.start()
        print("‚úÖ Monitor iniciado! Pressione Ctrl+C para parar.")
        
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            print("\nüõë Parando monitor...")
            observer.stop()
        
        observer.join()
        print("‚úÖ Monitor finalizado.")
        
    except FileNotFoundError:
        print("‚ùå Arquivo config.yaml n√£o encontrado!")
        print("Certifique-se de que o arquivo de configura√ß√£o existe.")
    except Exception as e:
        print(f"‚ùå Erro fatal: {e}")

if __name__ == "__main__":
    main()